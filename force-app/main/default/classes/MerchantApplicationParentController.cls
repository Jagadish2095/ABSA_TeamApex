/*
* Controller for MerchantApplicationParent Component
*
* @author  Prashant Jain / Jason Quevauvilliers
* @version v1.0
* @since   2020-05-04
*
* @updated: PJAIN: 20200531: Added functionality to return record type ids
*
*/
public class MerchantApplicationParentController {

    /**
* JQUEV: 20200504
* Initialize method to retrieve data
*/
    @AuraEnabled
    public static Map<String, String> getObjectData(String opportunityIdP) {
        Map<String, String> returnMap = new Map<String, String>();

        List<Application__c> applicationList = new ApplicationsSelector().selectByOpportunityOnboardId(opportunityIdP);
        if(applicationList != null && applicationList.size() > 0){
            returnMap.put('applicationId', applicationList[0].Id);
            returnMap.put('applicationRecordTypeId', applicationList[0].RecordTypeId);
            returnMap.put('opportunityRecordTypeId', applicationList[0].Opportunity__r.RecordTypeId);
        }

        List<OpportunityLineItem> oppLineItemList = new OpportunityLineItemsSelector().selectParentLineItemsByOpportunityId(opportunityIdP, 1);
        if(oppLineItemList != null && oppLineItemList.size() > 0){
            returnMap.put('opportunityLineItemId', oppLineItemList[0].Id);
            returnMap.put('opportunityLineItemProductName', oppLineItemList[0].Product2.Name);////Added By Himani: 20205553

            List<Application_Product_Merchant__c> appMerchList = new ApplicationProductMerchantsSelector().selectIdsByOpportunityLineItemId(oppLineItemList[0].Id);
            if(appMerchList != null && appMerchList.size() > 0){
                returnMap.put('applicationProductMerchantId', appMerchList[0].Id);
            }
        }

        return returnMap;
    }

    // PJAIN: 20200714: W-005081
    // This method queries approval requests. It considers the most recent record
    // for each process. Records with 'Removed' status are ignored. An error message
    // is returned when the most recent approval request was rejected or pending.
    // Otherwise a null is returned.
    @AuraEnabled
    public static String checkApprovals(String opportunityIdP){
        String returnMessage = '';
        String messagePrefix = 'The following Approval Process Decision(s) are still outstanding or are still rejected:\n';
        String messageSuffix = '\nKindly resubmit the approval in the relevant section OR proceed to close the opportunity as "Closed Lost" on the Opportunity Path Stage, and select the Close Lost Reason.';
        String bulletString = 'â€¢	';
        String labelMerchantApprovalProcesses = System.Label.Merchant_Approval_Processes;
        List<String> processNames = labelMerchantApprovalProcesses.split(',');
        List<ProcessInstance> processInstances = new ProcessInstancesSelector().selectByObjectIdAndProcessNames(new Set<Id>{opportunityIdP}, processNames);

        Set<String> approvedProcessSet = new Set<String>();
        String processName;
        String processLabel;
        String status;
        for (ProcessInstance processInstance : processInstances) {
            // Get out of the loop if all the process names have been added to the map
            if (processNames.size() == approvedProcessSet.size()) {
                break;
            }
            processName = processInstance.ProcessDefinition.DeveloperName;
            processLabel = processInstance.ProcessDefinition.Name;
            if (!approvedProcessSet.contains(processName)) {
                status = processInstance.Status;
                if (status == 'Removed') {
                    continue;
                } else if (status == 'Approved') {
                    approvedProcessSet.add(processName);
                } else {
                    returnMessage += bulletString + processLabel + ' --- ' + status + '\n';
                }
            }
        }

        // if return message is populated then add the prefix and suffix
        if (String.isNotBlank(returnMessage)) {
            returnMessage = messagePrefix + returnMessage + messageSuffix;
        }

        return returnMessage;
    }

    // PJAIN: 20200724
    // D BOOYSEN: 2020/08/18 - W-004984 and W-004857
    @AuraEnabled
    public static String generateMerchantApplicationDocument(Map<String, String> idsMap, String templateName) {
        if (System.Label.Merchant_Application_Agreement_E_Commerce_5122_Template_Name == templateName) {
            Id opportunityId = (id)idsMap.get('opportunityId');
            Map<String, String> result = GenerateDocument.generateNewDocument(opportunityId, templateName, new List<SignatureRequest__c>());
            return (new List<String>(result.keySet()))[0];
        }
        else        
            return GenerateDocument.autoGenerateDoc(templateName, idsMap);
    }

    // @author Himani Joshi: 20200720
    // Method that gets a map of lists of updated documents and mandatory documents
    @AuraEnabled
    public static Map<String, Object> getUploadedAndMandatoryDocuments(Id opportunityId, String entityType, String productName) {
        Map<String, Object> responseMap = new Map<String, Object>();
        responseMap.put('uploadedDocuments', new DocumentsSelector().selectDocumentsByOppId(opportunityId));
        responseMap.put('mandatoryDocuments', Sys_Utilities_Metadata.getMandatoryDocs('Merchant ' + entityType, 'Merchant', productName));
        return responseMap;
    }

    // esign the doc //Story W-004373 - Tinashe Shoko - START
    @AuraEnabled
    public static List<Map<String, Object>> getSignatoriesData(Id opportunityId) {
        List<Document__c> docList = new DocumentsSelector().selectByTypeAndOppId(opportunityId,'Application Form');
        if (!docList.isEmpty() && docList != null && docList.size() > 0) {
            return DocumentsShareControllerESign.getSignatoriesData( docList[0].Id  );
        }
        return null;
    }

    /***
* Tinashe Shoko - W-004373
* Assumption being there is only one quote document per Opportunity or rather last one
* uploaded/generated is valid
* Check if it is valid for e-signing i.e. it has not already been or send for esigning
* Pass Opp Id
* Return Boolean
*/
    @AuraEnabled
    public static boolean documentRestricted(Id opportunityId) {
        boolean restricted = false;
        List<Document__c> docList = new DocumentsSelector().selectByTypeAndOppId(opportunityId,'Application Form');
        if (!docList.isEmpty() && docList != null && docList.size() > 0) {
            restricted = DocumentsShareControllerESign.documentRestricted(opportunityId, docList[0].Id  );
        } else {
            return true;
        }
        return restricted;
    }

    @AuraEnabled
    public static List<String> getAllClientEmailsSignature(Id opportunityId) {
        return DocumentsShareControllerESign.getAllClientEmailsSignature(opportunityId);
    }

    @AuraEnabled
    public static List<String> getMobile(Id opportunityId) {
        return DocumentsShareControllerESign.getMobile(opportunityId);
    }

    @AuraEnabled
    public static List <String> getDigitalSignatorySelectOptions(string fld) {
        return DocumentsShareControllerESign.getDigitalSignatorySelectOptions(fld);
    }

    @AuraEnabled
    public static List<Map<String, Object>> getUpdatedSignatoriesData(Id opportunityId, Id signatoryId, String signatoriesInput, String method, String mobile, String email) {
        List<Document__c> docList = new DocumentsSelector().selectByTypeAndOppId(opportunityId,'Application Form');
        List<Map<String,Object>> listTotal = new List<Map<String,Object>>();
        if (!docList.isEmpty() && docList != null && docList.size() > 0) {
            return DocumentsShareControllerESign.getUpdatedSignatoriesData(opportunityId, docList[0].Id, signatoryId, signatoriesInput, method, mobile, email);
        }
        return listTotal;
    }

    @AuraEnabled
    public static String sendForImpressionSignature(Id opportunityId, String signatories) {
        String wid;
        List<Document__c> docList = new DocumentsSelector().selectByTypeAndOppId(opportunityId,'Application Form');
        List<Map<String,Object>> listTotal = new List<Map<String,Object>>();
        if (!docList.isEmpty() && docList != null && docList.size() > 0) {
            return DocumentsShareControllerESign.sendForImpressionSignature(docList[0].Id, signatories);
        }
        return wid;
    }

    /**
* @author Tinashe Shoko
* Method that gets a list of all Impression requests for an Opportunity
*
* @param opportunityId
* @return impressionRequests
*/
    @AuraEnabled
    public static List<ImpressionRequest__c> fetchImpressionRequest(Id opportunityId) {
        List<ImpressionRequest__c> impressionRequests = new ImpressionRequestsSelector().selectRequestsByOpptyId(opportunityId);
        return impressionRequests;
    }

    @AuraEnabled
    public static String getDocumentContent(Id opportunityId, String sharingMethod, String clientEmail) {
        List<Document__c> docList = new DocumentsSelector().selectByTypeAndOppId(opportunityId,'Application Form');
        List<Map<String,Object>> listTotal = new List<Map<String,Object>>();
        if (!docList.isEmpty() && docList != null && docList.size() > 0) {
            return DocumentsShareControllerESign.getDocumentContent(opportunityId, docList[0].Id, sharingMethod, clientEmail);
        }
        return null;
    }

    @AuraEnabled
    public static String getQuoteDocumentName(Id opportunityId) {
        String docName;
        List<Document__c> docList = new DocumentsSelector().selectByTypeAndOppId(opportunityId,'Application Form');
        if (!docList.isEmpty() && docList != null && docList.size() > 0) {
            docName = docList[0].Name;
        }
        return docName;
    }

    @AuraEnabled
    public static void sendDocumentSharingEmail(String opportunityId) {
        List<Document__c> docList = new DocumentsSelector().selectByTypeAndOppId(opportunityId,'Application Form');
        if (!docList.isEmpty() && docList != null && docList.size() > 0) {
            String idListJSON = '["' + docList[0].Id + '"]';
            List<OpportunityLineItem> oppLineItemList = new OpportunityLineItemsSelector().selectParentLineItemsByOpportunityId(opportunityId,1);
            if(oppLineItemList != null && oppLineItemList.size() > 0 && !oppLineItemList.isEmpty()){
                List<Map<String, Object>> signatoriesData = getSignatoriesData(opportunityId);
                if(signatoriesData != null && signatoriesData.size() > 0 && !signatoriesData.isEmpty()){
                    Map<String, Object> mySignData = signatoriesData[0];
                    String clientEmail = String.valueOf(mySignData.get('Email'));
                    DocumentsShareControllerESign.sendDocumentSharingEmail(opportunityId, clientEmail, idListJSON);
                }
            }
        }
    }

    // esign the doc //Story W-004373 - Tinashe Shoko - END

    //D Booysen: 2020/08/07 (W-005541)
    //Change the Document_Status__c of all signed Merchant Agreement documents when the application is revised
    @AuraEnabled
    public static void outdateDocumentStatus(Id opportunityId){
        Set<String> docTypeSet = new Set<String>();
        docTypeSet.addAll(System.Label.Merchant_Application_Documents_To_Outdate.split(';'));
        Set<String> statusSet = new Set<String>{'Signed', 'Signed Manually'};
        List<Document__c> signedDocumentList = new DocumentsSelector().selectByStatusTypeAndOppId(opportunityId, docTypeSet, statusSet);
        if(signedDocumentList != null && signedDocumentList.size() > 0){
            for(Document__c signedDoc : signedDocumentList){
                signedDoc.Document_Status__c = 'Outdated';
            }
            update signedDocumentList;
        }
    }

}